// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
	static Array power2;

    /** Initializes the library. */
    function void init() {
		let power2 = Array.new(16);
		let power2[0] = 1;
		let power2[1] = 2;
		let power2[2] = 4;
		let power2[3] = 8;
		let power2[4] = 16;
		let power2[5] = 32;
		let power2[6] = 64;
		let power2[7] = 128;
		let power2[8] = 256;
		let power2[9] = 512;
		let power2[10] = 1024;
		let power2[11] = 2048;
		let power2[12] = 4096;
		let power2[13] = 8192;
		let power2[14] = 16384;
		let power2[15] = 16384 + 16384;
		return;
    }
	/**
	*/
	function bool helper(int x, int j) {
		var bool temp1, temp2;
		
		let temp1 = x & power2[j];
		let temp2 = temp1 = 0;
		return (~(temp2));
	}
	
	function boolean helper2(int x, int i) {
        var int a;
        let a = power2[i] & x;
        if (a > 0) {
            return true;
        }
        return false;
    }
	

    /** Returns the absolute value of x. 
	*/
    function int abs(int x) {
		if (x < 0) {
			return -x;
		}
		return x;
    }
	

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
		var int shiftx, sum, i;
		let i = 0;
		let sum = 0;
		let shiftx = x;

		while (i < 16) {
			if (Math.helper(y, i)) {
				let sum = sum + shiftx;
			}
			let shiftx = shiftx + shiftx;
			let i = i + 1;
		}
		return sum;
    }
	

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
		var int temp, res , abs_x, abs_y;
		var boolean neg;

		let neg = ( (y < 0) & (x > 0) | (y > 0) & (x < 0) );
		//let neg =  ( (y > 0) & (x < 0) ) | ( (y < 0) & (x > 0) );
		let abs_x = Math.abs(x);
		let abs_y = Math.abs(y);

		if (abs_y > abs_x | abs_y < 0) {
			return 0;
		}
		let temp = Math.divide(abs_x, abs_y + abs_y);
		if (abs_x - Math.multiply(abs_y, (temp + temp)) < abs_y ) {
			let res = temp + temp;
		}
		else {
			let res = temp + temp + 1;
		}
		if (neg) {
			return -res;
		}
		return res;
    }
	

    /** Returns the integer part of the stempuare root of x. */
    function int sqrt(int x) {
		var int y, i, k;
		let i = 7;
		let y = 0;

		while (~(i < 0)) {   		
			let k = y + power2[i];
			let k = Math.multiply(k, k);
			if (~(k > x) & (k > 0)) {
				let y = y + power2[i];
			}
			let i = i - 1;
		}
		return y;

    }
	

    /** Returns the greater number.*/
    function int max(int a, int b) {
		if (a > b) {
			return a;
		}
		return b;
	}

    /** Returns the smaller number. */
    function int min(int a, int b) {
		if (a < b) {
			return a;
		}
	return b;
    }
	

	
	/** divide by 16 */
    function int shiftRight4(int x) {
        var int idx, result,temp1,temp2;
        let idx = 0;
        let result = 0;
        while (idx < 12){
			let temp1 = idx+4;
            if (Math.helper2(x, temp1)) {
				let temp2 = power2[idx];
                let result = result + temp2;
            }
            let idx = idx + 1;
        }
        return result;
    }
	
	
	
}

