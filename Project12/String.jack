// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
	field int len, maxLen;	
	field Array myString; 
    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
		if(maxLength < 1)
        {
            let maxLength = 1;
        }
		let myString = Array.new(maxLength);
		let maxLen = maxLength;
		let len = 0;
		return this;
    }

    /** Disposes this string. */
    method void dispose() {
		do Memory.deAlloc(this);		
		return;		
    }

    /** Returns the current length of this string. */
    method int length() {
		return len;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
	
		if ((len - 1) < j)	{
			do Sys.error(17);
		}
	
		if (j < 0){
			do Sys.error(18);
		}
		return myString[j];
	}

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
		if ((len - 1) < j)	{
			do Sys.error(17);
		}
	
		if (j < 0){
			do Sys.error(18);
		}
	    let myString[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
    	if (maxLen = len){
            do Sys.error(17);
        }
        let myString[len] = c;
        let len = len + 1;
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
	
		if (len<1){			
			do Sys.error(18);
		}
		let len = len - 1;		
		return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
	    var int i, ret;
        var boolean neg;
		let ret = 0;
        let neg = false;
        let i = 0;
        if(myString[i] = 45){
            let neg = true;
            let i = i + 1;
        }
        while(i < len){
            let ret = (myString[i] - 48) + (ret * 10);
            let i = i + 1;
        }
        if(neg){
            let ret = -1 * ret;
        }
        return ret;
    }
	
	
     method void setIntHelper(int val){
        var int last, rest;
        if(val = 0)
        {
            return;
        }
        let rest = val / 10;
        let last = val - (rest * 10);
        do setIntHelper(rest);
        do appendChar(last + 48);
        return;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
	    var int curNum;
        let curNum = val;
        let len = 0;
        if(curNum < 0)
        {
            let curNum = curNum * -1;
            do appendChar(45);
        }
        do setIntHelper(curNum);
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
		return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
		return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
		return 34;
    }
}
