// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
	static Array memory;
	static int freeListStart, freeListEnd, startHeap, endtHeap;

    /** Initializes the class. */
    function void init() {
		//let memory = 0;
    	let memory[2048] = 14335;
    	let memory[2049] = -1;
    	let freeListStart = 2048;
    	let freeListEnd = -1;
    	let startHeap = 2048;
    	let endtHeap = 16383;
    	return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
		return memory[address];

    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
		let memory[address] = value;
		return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
		var int add,curr,prev;
		let add = -1;
		let prev = freeListStart;
		let curr = freeListStart;
		while (~(memory[curr] > size) & ~(curr = freeListEnd)) {
			let prev = curr;
			let curr = memory[curr + 1];
			}
		if (~(curr = freeListEnd)) {
			if (memory[curr] > (size + 3)) {
				let memory[curr] = memory[curr] - size - 1;
				let add = curr + memory[curr];
				let memory[add - 1] = (size + 1);
			} else {
				let memory[prev + 1] = memory[curr + 1];	
				let memory[curr] = size + 1;	
				let add = curr + 1;			
			}
		} 
			return add;

    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array object) {
	
		let memory[object] = memory[object - 1];
    	let memory[(object + 1)] = memory[freeListStart + 1];
    	let memory[freeListStart + 1] = object;

    	return;
    }    
}
